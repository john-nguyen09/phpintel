PhpDocument {
  uri: 'file:///C:/Users/snowk/Development/phpintel/test/case/namespace.php',
  text: '<?php\r\nnamespace SampleNamespace1\\SampleNestedNamespace1;\r\n\r\nuse SampleNamespace2\\TestClassNamespace2;\r\nuse UnusedNamespace1\\{\r\n    Class1,\r\n    Class2\r\n};\r\nuse UnusedNamespace2\\{\r\n    Class1 as BaseClass1,\r\n    Class3\r\n};\r\nuse UnusedNamespace3\\TestClassNamespace1 as BaseTestClass;\r\n\r\ndefine(\'CONSTANT_IN_NAMESPACE\', 1);\r\nconst ANOTHER_CONSTANT_TYPE_IN_NAMESPACE = \'Hello world!!!\';\r\n\r\n\r\n/**\r\n * @param TestClassNamespace1 $param1\r\n * @param \\FullyQualified\\Name\\Class $param2\r\n * @param boolean\r\n * \r\n * @return TestClassNamespace2\r\n */\r\nfunction function_with_namespace($param1, $param2, bool $param3) {\r\n    $var1 = false;\r\n    $var2 = \'abc\';\r\n    $var3 = CONSTANT_IN_NAMESPACE;\r\n\r\n    if ($var1 && $var2 && $var3) {\r\n        return $var3;\r\n    }\r\n\r\n    if ($var1 && $var2) {\r\n        return $var2;\r\n    }\r\n\r\n    if ($var1) {\r\n        return $param1;\r\n    }\r\n\r\n    if ($var2) {\r\n        return $param2;\r\n    }\r\n\r\n    if ($var3) {\r\n        return $param3;\r\n    }\r\n}\r\n\r\nclass TestClassNamespace1 {\r\n\r\n}',
  symbols: 
   [ DefineConstant {
       name: TypeName { isArray: false, name: 'CONSTANT_IN_NAMESPACE' },
       constant: Constant { name: null,
          location: 
           Location {
             uri: 'file:///C:/Users/snowk/Development/phpintel/test/case/namespace.php',
             range: 
              Range {
                start: Position { line: 14, character: 0 },
                end: Position { line: 14, character: 34 } } },
          value: '1',
          type: TypeName { isArray: false, name: 'int' } } },
     Constant { name: TypeName { isArray: false, name: 'ANOTHER_CONSTANT_TYPE_IN_NAMESPACE' },
       location: 
        Location {
          uri: 'file:///C:/Users/snowk/Development/phpintel/test/case/namespace.php',
          range: 
           Range {
             start: Position { line: 15, character: 6 },
             end: Position { line: 15, character: 59 } } },
       value: '\'Hello world!!!\'',
       type: TypeName { isArray: false, name: 'string' } },
     ConstantAccess {
       value: 'false',
       type: TypeName { isArray: false, name: 'bool' } },
     ConstantAccess {
       value: 'CONSTANT_IN_NAMESPACE',
       type: TypeName { isArray: false, name: 'CONSTANT_IN_NAMESPACE' } },
     Function {
       name: TypeName { isArray: false, name: 'function_with_namespace' },
       parameters: [ [Object], [Object], [Object] ],
       scopeVar: Scope { variables: [Object] },
       typeAggregate: TypeComposite { _types: [Array] },
       description: '',
       docParamTypes: { '$param1': [Object], '$param2': [Object], '$null': [Object] } },
     Class {
       name: TypeName { isArray: false, name: 'TestClassNamespace1' },
       extend: null,
       implements: [],
       modifier: SymbolModifier { modifier: 0 },
       traits: [],
       location: 
        Location {
          uri: 'file:///C:/Users/snowk/Development/phpintel/test/case/namespace.php',
          range: [Object] } } ],
  importTable: 
   ImportTable {
     namespace: NamespaceName { parts: [ 'SampleNamespace1', 'SampleNestedNamespace1' ] },
     imports: 
      { TestClassNamespace2: '\\SampleNamespace2\\TestClassNamespace2',
        Class1: '\\UnusedNamespace1\\Class1',
        Class2: '\\UnusedNamespace1\\Class2',
        BaseClass1: '\\UnusedNamespace2\\Class1',
        Class3: '\\UnusedNamespace2\\Class3',
        BaseTestClass: '\\UnusedNamespace3\\TestClassNamespace1' } } }