// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`namespaceDef should assign namespace to phpDocument 1`] = `
PhpDocument {
  "classConstants": Array [],
  "classes": Array [
    Class {
      "extend": null,
      "implements": Array [],
      "location": Location {
        "range": Range {
          "end": Position {
            "character": 1,
            "line": 5,
            "offset": 66,
          },
          "start": Position {
            "character": 0,
            "line": 3,
            "offset": 34,
          },
        },
        "relativeUri": "case/namespaceDef/class.php",
      },
      "modifier": SymbolModifier {
        "modifier": 0,
        "visibility": 0,
      },
      "name": TypeName {
        "isArray": false,
        "name": "\\\\NamespaceDef\\\\TestClassNamespace1",
      },
      "traits": Array [],
    },
  ],
  "constants": Array [],
  "functions": Array [],
  "importTable": ImportTable {
    "imports": Object {},
    "namespace": NamespaceName {
      "parts": Array [
        "NamespaceDef",
      ],
    },
  },
  "methods": Array [],
  "properties": Array [],
}
`;

exports[`namespaceDef should assign namespace to phpDocument 2`] = `
PhpDocument {
  "classConstants": Array [],
  "classes": Array [],
  "constants": Array [
    Constant {
      "name": TypeName {
        "isArray": false,
        "name": "\\\\NamespaceDef\\\\PI",
      },
      "type": TypeName {
        "isArray": false,
        "name": "float",
      },
      "value": "3.14",
    },
  ],
  "functions": Array [],
  "importTable": ImportTable {
    "imports": Object {},
    "namespace": NamespaceName {
      "parts": Array [
        "NamespaceDef",
      ],
    },
  },
  "methods": Array [],
  "properties": Array [],
}
`;

exports[`namespaceDef should assign namespace to phpDocument 3`] = `
PhpDocument {
  "classConstants": Array [],
  "classes": Array [],
  "constants": Array [],
  "functions": Array [],
  "importTable": ImportTable {
    "imports": Object {},
    "namespace": NamespaceName {
      "parts": Array [
        "NamespaceDef",
      ],
    },
  },
  "methods": Array [],
  "properties": Array [],
}
`;

exports[`namespaceDef should assign namespace to phpDocument 4`] = `
PhpDocument {
  "classConstants": Array [],
  "classes": Array [],
  "constants": Array [],
  "functions": Array [
    Function {
      "description": "",
      "name": TypeName {
        "isArray": false,
        "name": "\\\\NamespaceDef\\\\function_with_namespace",
      },
      "parameters": Array [
        Parameter {
          "name": "$param1",
          "type": TypeComposite {
            "_types": Array [
              TypeName {
                "isArray": false,
                "name": "\\\\NamespaceDef\\\\TestClassNamespace1",
              },
            ],
          },
          "value": "",
        },
        Parameter {
          "name": "$param2",
          "type": TypeComposite {
            "_types": Array [
              TypeName {
                "isArray": false,
                "name": "\\\\FullyQualified\\\\Name\\\\Class",
              },
            ],
          },
          "value": "",
        },
        Parameter {
          "name": "$param3",
          "type": TypeComposite {
            "_types": Array [
              TypeName {
                "isArray": false,
                "name": "boolean",
              },
            ],
          },
          "value": "",
        },
      ],
      "scopeVar": Scope {
        "variables": Object {
          "$param1": Variable {
            "expression": Expression {},
            "name": "$param1",
            "type": TypeComposite {
              "_types": Array [
                TypeName {
                  "isArray": false,
                  "name": "\\\\NamespaceDef\\\\TestClassNamespace1",
                },
              ],
            },
          },
          "$param2": Variable {
            "expression": Expression {},
            "name": "$param2",
            "type": TypeComposite {
              "_types": Array [
                TypeName {
                  "isArray": false,
                  "name": "\\\\FullyQualified\\\\Name\\\\Class",
                },
              ],
            },
          },
          "$param3": Variable {
            "expression": Expression {},
            "name": "$param3",
            "type": TypeComposite {
              "_types": Array [
                TypeName {
                  "isArray": false,
                  "name": "boolean",
                },
              ],
            },
          },
          "$var1": SimpleVariable {
            "expression": Expression {
              "currentSymbol": ConstantAccess {
                "type": TypeName {
                  "isArray": false,
                  "name": "boolean",
                },
                "value": "false",
              },
            },
            "location": Location {
              "range": Range {
                "end": Position {
                  "character": 9,
                  "line": 11,
                  "offset": 262,
                },
                "start": Position {
                  "character": 4,
                  "line": 11,
                  "offset": 257,
                },
              },
              "uri": "file:///C:/Users/Thuan/Development/phpintel/case/namespaceDef/function.php",
            },
            "name": "$var1",
            "type": TypeComposite {
              "_types": Array [
                TypeName {
                  "isArray": false,
                  "name": "boolean",
                },
              ],
            },
          },
          "$var2": SimpleVariable {
            "expression": Expression {
              "currentSymbol": TokenSymbol {
                "text": "'abc'",
              },
            },
            "location": Location {
              "range": Range {
                "end": Position {
                  "character": 9,
                  "line": 12,
                  "offset": 282,
                },
                "start": Position {
                  "character": 4,
                  "line": 12,
                  "offset": 277,
                },
              },
              "uri": "file:///C:/Users/Thuan/Development/phpintel/case/namespaceDef/function.php",
            },
            "name": "$var2",
            "type": TypeComposite {
              "_types": Array [
                TypeName {
                  "isArray": false,
                  "name": "string",
                },
              ],
            },
          },
          "$var3": SimpleVariable {
            "expression": Expression {
              "currentSymbol": ConstantAccess {
                "type": TypeName {
                  "isArray": false,
                  "name": "CONSTANT_IN_NAMESPACE",
                },
                "value": "CONSTANT_IN_NAMESPACE",
              },
            },
            "location": Location {
              "range": Range {
                "end": Position {
                  "character": 9,
                  "line": 13,
                  "offset": 302,
                },
                "start": Position {
                  "character": 4,
                  "line": 13,
                  "offset": 297,
                },
              },
              "uri": "file:///C:/Users/Thuan/Development/phpintel/case/namespaceDef/function.php",
            },
            "name": "$var3",
            "type": TypeComposite {
              "_types": Array [
                TypeName {
                  "isArray": false,
                  "name": "CONSTANT_IN_NAMESPACE",
                },
              ],
            },
          },
        },
      },
      "types": Array [
        TypeName {
          "isArray": false,
          "name": "CONSTANT_IN_NAMESPACE",
        },
        TypeName {
          "isArray": false,
          "name": "string",
        },
        TypeName {
          "isArray": false,
          "name": "\\\\NamespaceDef\\\\TestClassNamespace1",
        },
        TypeName {
          "isArray": false,
          "name": "\\\\FullyQualified\\\\Name\\\\Class",
        },
        TypeName {
          "isArray": false,
          "name": "boolean",
        },
      ],
    },
  ],
  "importTable": ImportTable {
    "imports": Object {},
    "namespace": NamespaceName {
      "parts": Array [
        "NamespaceDef",
      ],
    },
  },
  "methods": Array [],
  "properties": Array [],
}
`;
