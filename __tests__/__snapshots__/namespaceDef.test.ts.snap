// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`namespaceDef should assign namespace to phpDocument 1`] = `
PhpDocument {
  "importTable": ImportTable {
    "imports": Location {},
    "namespace": NamespaceName {
      "parts": Array [
        "NamespaceDef",
      ],
    },
  },
  "symbols": Class {
    "extend": null,
    "implements": Array [],
    "location": Location {
      "range": Range {
        "end": Position {
          "character": 1,
          "line": 5,
        },
        "start": Position {
          "character": 0,
          "line": 3,
        },
      },
      "uri": "case/namespaceDef/class.php",
    },
    "modifier": SymbolModifier {
      "modifier": 0,
      "visibility": 0,
    },
    "name": TypeName {
      "isArray": false,
      "name": "TestClassNamespace1",
    },
    "traits": Array [],
  },
}
`;

exports[`namespaceDef should assign namespace to phpDocument 2`] = `
PhpDocument {
  "importTable": ImportTable {
    "imports": Location {},
    "namespace": NamespaceName {
      "parts": Array [
        "NamespaceDef",
      ],
    },
  },
  "symbols": Constant {
    "acceptWhitespace": true,
    "expression": Expression {
      "currentSymbol": TokenSymbol {
        "text": "3.14",
      },
    },
    "hasEqual": true,
    "location": Location {
      "range": Range {
        "end": Position {
          "character": 15,
          "line": 3,
        },
        "start": Position {
          "character": 6,
          "line": 3,
        },
      },
      "uri": "case/namespaceDef/constant.php",
    },
    "name": TypeName {
      "isArray": false,
      "name": "PI",
    },
  },
}
`;

exports[`namespaceDef should assign namespace to phpDocument 3`] = `
PhpDocument {
  "importTable": ImportTable {
    "imports": Location {},
    "namespace": NamespaceName {
      "parts": Array [
        "NamespaceDef",
      ],
    },
  },
  "symbols": DefineConstant {
    "constant": Constant {
      "acceptWhitespace": true,
      "expression": Expression {
        "currentSymbol": TokenSymbol {
          "text": "'Hello world!!!'",
        },
      },
      "hasEqual": false,
      "location": Location {
        "range": Range {
          "end": Position {
            "character": 40,
            "line": 3,
          },
          "start": Position {
            "character": 0,
            "line": 3,
          },
        },
        "uri": "case/namespaceDef/defineConst.php",
      },
    },
    "name": TypeName {
      "isArray": false,
      "name": "DEFINE_CONST",
    },
  },
}
`;

exports[`namespaceDef should assign namespace to phpDocument 4`] = `
PhpDocument {
  "importTable": ImportTable {
    "imports": Location {},
    "namespace": NamespaceName {
      "parts": Array [
        "NamespaceDef",
      ],
    },
  },
  "symbols": Function {
    "description": "",
    "docParamTypes": Location {
      "$null": TypeName {
        "isArray": false,
        "name": "boolean",
      },
      "$param1": TypeName {
        "isArray": false,
        "name": "TestClassNamespace1",
      },
      "$param2": TypeName {
        "isArray": false,
        "name": "FullyQualified\\\\Name\\\\Class",
      },
    },
    "name": TypeName {
      "isArray": false,
      "name": "function_with_namespace",
    },
    "parameters": Parameter {
      "name": "$param3",
      "type": TypeComposite {
        "_types": Array [
          TypeName {
            "isArray": false,
            "name": "bool",
          },
        ],
      },
      "value": "",
    },
    "scopeVar": Scope {
      "variables": Location {
        "$param1": Variable {
          "expression": Expression {},
          "name": "$param1",
          "type": TypeComposite {
            "_types": Array [
              TypeName {
                "isArray": false,
                "name": "TestClassNamespace1",
              },
            ],
          },
        },
        "$param2": Variable {
          "expression": Expression {},
          "name": "$param2",
          "type": TypeComposite {
            "_types": Array [
              TypeName {
                "isArray": false,
                "name": "FullyQualified\\\\Name\\\\Class",
              },
            ],
          },
        },
        "$param3": Variable {
          "expression": Expression {},
          "name": "$param3",
          "type": TypeComposite {
            "_types": Array [
              TypeName {
                "isArray": false,
                "name": "bool",
              },
            ],
          },
        },
        "$var1": SimpleVariable {
          "expression": Expression {},
          "name": "$var1",
          "type": TypeComposite {
            "_types": Array [],
          },
        },
        "$var2": SimpleVariable {
          "expression": Expression {},
          "name": "$var2",
          "type": TypeComposite {
            "_types": Array [],
          },
        },
        "$var3": SimpleVariable {
          "expression": Expression {},
          "name": "$var3",
          "type": TypeComposite {
            "_types": Array [],
          },
        },
      },
    },
    "typeAggregate": TypeComposite {
      "_types": Array [
        TypeName {
          "isArray": false,
          "name": "TestClassNamespace1",
        },
        TypeName {
          "isArray": false,
          "name": "FullyQualified\\\\Name\\\\Class",
        },
        TypeName {
          "isArray": false,
          "name": "bool",
        },
      ],
    },
  },
}
`;
