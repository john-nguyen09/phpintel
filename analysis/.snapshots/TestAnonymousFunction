([]analysis.Symbol) (len=14) {
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 2:0-2:6
      },
      Name: (string) (len=6) "$func1"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 2:0-2:6
      },
      Name: (string) (len=6) "$func1"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.AnonymousFunction)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 2:9-4:1
    },
    Params: ([]*analysis.Parameter) (len=1) {
      (*analysis.Parameter)({
        location: (protocol.Location) {
          URI: (string) (len=5) "test1",
          Range: (protocol.Range) 2:19-2:24
        },
        description: (string) "",
        Name: (string) (len=5) "$var1",
        Type: (analysis.TypeComposite) {
          typeStrings: ([]analysis.TypeString) <nil>,
          uniqueFQNs: (map[string]bool) <nil>
        },
        Value: (string) ""
      })
    }
  }),
  (*analysis.ClassAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=7) "\\Schema",
            original: (string) (len=6) "Schema"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=7) "\\Schema": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 6:0-6:6
      },
      Name: (string) (len=6) "Schema"
    }
  }),
  (*analysis.ScopedMethodAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.ClassAccess)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) (len=1) {
              (analysis.TypeString) {
                fqn: (string) (len=7) "\\Schema",
                original: (string) (len=6) "Schema"
              }
            },
            uniqueFQNs: (map[string]bool) (len=1) {
              (string) (len=7) "\\Schema": (bool) true
            }
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 6:0-6:6
          },
          Name: (string) (len=6) "Schema"
        }
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 6:8-6:14
      },
      Name: (string) (len=6) "create"
    },
    hasResolved: (bool) false
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 6:15-9:1
    },
    arguments: ([]phrase.AstNode) (len=2) {
      (*lexer.Token)(StringLiteral 55 12),
      (*phrase.Phrase)({
        Type: (phrase.PhraseType) AnonymousFunctionCreationExpression,
        Children: ([]phrase.AstNode) (len=3) {
          (*phrase.Phrase)({
            Type: (phrase.PhraseType) AnonymousFunctionHeader,
            Children: ([]phrase.AstNode) (len=5) {
              (*lexer.Token)(Function 69 8),
              (*lexer.Token)(Whitespace 77 1),
              (*lexer.Token)(OpenParenthesis 78 1),
              (*phrase.Phrase)({
                Type: (phrase.PhraseType) ParameterDeclarationList,
                Children: ([]phrase.AstNode) (len=1) {
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ParameterDeclaration,
                    Children: ([]phrase.AstNode) (len=3) {
                      (*phrase.Phrase)({
                        Type: (phrase.PhraseType) TypeDeclaration,
                        Children: ([]phrase.AstNode) (len=1) {
                          (*phrase.Phrase)({
                            Type: (phrase.PhraseType) QualifiedName,
                            Children: ([]phrase.AstNode) (len=1) {
                              (*phrase.Phrase)({
                                Type: (phrase.PhraseType) NamespaceName,
                                Children: ([]phrase.AstNode) (len=1) {
                                  (*lexer.Token)(Name 79 9)
                                }
                              })
                            }
                          })
                        }
                      }),
                      (*lexer.Token)(Whitespace 88 1),
                      (*lexer.Token)(VariableName 89 6)
                    }
                  })
                }
              }),
              (*lexer.Token)(CloseParenthesis 95 1)
            }
          }),
          (*lexer.Token)(Whitespace 96 1),
          (*phrase.Phrase)({
            Type: (phrase.PhraseType) FunctionDeclarationBody,
            Children: ([]phrase.AstNode) (len=5) {
              (*lexer.Token)(OpenBrace 97 1),
              (*lexer.Token)(Whitespace 98 5),
              (*phrase.Phrase)({
                Type: (phrase.PhraseType) StatementList,
                Children: ([]phrase.AstNode) (len=3) {
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ExpressionStatement,
                    Children: ([]phrase.AstNode) (len=2) {
                      (*phrase.Phrase)({
                        Type: (phrase.PhraseType) MethodCallExpression,
                        Children: ([]phrase.AstNode) (len=6) {
                          (*phrase.Phrase)({
                            Type: (phrase.PhraseType) SimpleVariable,
                            Children: ([]phrase.AstNode) (len=1) {
                              (*lexer.Token)(VariableName 103 6)
                            }
                          }),
                          (*lexer.Token)(Arrow 109 2),
                          (*phrase.Phrase)({
                            Type: (phrase.PhraseType) MemberName,
                            Children: ([]phrase.AstNode) (len=1) {
                              (*lexer.Token)(Name 111 13)
                            }
                          }),
                          (*lexer.Token)(OpenParenthesis 124 1),
                          (*phrase.Phrase)({
                            Type: (phrase.PhraseType) ArgumentExpressionList,
                            Children: ([]phrase.AstNode) (len=1) {
                              (*lexer.Token)(StringLiteral 125 4)
                            }
                          }),
                          (*lexer.Token)(CloseParenthesis 129 1)
                        }
                      }),
                      (*lexer.Token)(Semicolon 130 1)
                    }
                  }),
                  (*lexer.Token)(Whitespace 131 5),
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ExpressionStatement,
                    Children: ([]phrase.AstNode) (len=2) {
                      (*phrase.Phrase)({
                        Type: (phrase.PhraseType) MethodCallExpression,
                        Children: ([]phrase.AstNode) (len=5) {
                          (*phrase.Phrase)({
                            Type: (phrase.PhraseType) SimpleVariable,
                            Children: ([]phrase.AstNode) (len=1) {
                              (*lexer.Token)(VariableName 136 6)
                            }
                          }),
                          (*lexer.Token)(Arrow 142 2),
                          (*phrase.Phrase)({
                            Type: (phrase.PhraseType) MemberName,
                            Children: ([]phrase.AstNode) (len=1) {
                              (*lexer.Token)(Name 144 10)
                            }
                          }),
                          (*lexer.Token)(OpenParenthesis 154 1),
                          (*lexer.Token)(CloseParenthesis 155 1)
                        }
                      }),
                      (*lexer.Token)(Semicolon 156 1)
                    }
                  })
                }
              }),
              (*lexer.Token)(Whitespace 157 1),
              (*lexer.Token)(CloseBrace 158 1)
            }
          })
        }
      })
    },
    ranges: ([]protocol.Range) (len=2) {
      (protocol.Range) 6:15-6:27,
      (protocol.Range) 6:27-9:1
    }
  }),
  (*analysis.TypeDeclaration)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 6:39-6:48
    },
    Name: (string) (len=9) "Blueprint",
    Type: (analysis.TypeComposite) {
      typeStrings: ([]analysis.TypeString) (len=1) {
        (analysis.TypeString) {
          fqn: (string) (len=10) "\\Blueprint",
          original: (string) (len=9) "Blueprint"
        }
      },
      uniqueFQNs: (map[string]bool) (len=1) {
        (string) (len=10) "\\Blueprint": (bool) true
      }
    }
  }),
  (*analysis.AnonymousFunction)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 6:29-9:1
    },
    Params: ([]*analysis.Parameter) (len=1) {
      (*analysis.Parameter)({
        location: (protocol.Location) {
          URI: (string) (len=5) "test1",
          Range: (protocol.Range) 6:39-6:55
        },
        description: (string) "",
        Name: (string) (len=6) "$table",
        Type: (analysis.TypeComposite) {
          typeStrings: ([]analysis.TypeString) (len=1) {
            (analysis.TypeString) {
              fqn: (string) (len=10) "\\Blueprint",
              original: (string) (len=9) "Blueprint"
            }
          },
          uniqueFQNs: (map[string]bool) (len=1) {
            (string) (len=10) "\\Blueprint": (bool) true
          }
        },
        Value: (string) ""
      })
    }
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=10) "\\Blueprint",
            original: (string) (len=9) "Blueprint"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=10) "\\Blueprint": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 7:4-7:10
      },
      Name: (string) (len=6) "$table"
    },
    description: (string) "",
    canReferenceGlobal: (bool) false,
    hasResolved: (bool) false
  }),
  (*analysis.MethodAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.Variable)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) (len=1) {
              (analysis.TypeString) {
                fqn: (string) (len=10) "\\Blueprint",
                original: (string) (len=9) "Blueprint"
              }
            },
            uniqueFQNs: (map[string]bool) (len=1) {
              (string) (len=10) "\\Blueprint": (bool) true
            }
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 7:4-7:10
          },
          Name: (string) (len=6) "$table"
        },
        description: (string) "",
        canReferenceGlobal: (bool) false,
        hasResolved: (bool) false
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 7:12-7:25
      },
      Name: (string) (len=13) "bigIncrements"
    },
    hasResolved: (bool) false
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 7:26-7:30
    },
    arguments: ([]phrase.AstNode) (len=1) {
      (*lexer.Token)(StringLiteral 125 4)
    },
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 7:26-7:30
    }
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=10) "\\Blueprint",
            original: (string) (len=9) "Blueprint"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=10) "\\Blueprint": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 8:4-8:10
      },
      Name: (string) (len=6) "$table"
    },
    description: (string) "",
    canReferenceGlobal: (bool) false,
    hasResolved: (bool) false
  }),
  (*analysis.MethodAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.Variable)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) (len=1) {
              (analysis.TypeString) {
                fqn: (string) (len=10) "\\Blueprint",
                original: (string) (len=9) "Blueprint"
              }
            },
            uniqueFQNs: (map[string]bool) (len=1) {
              (string) (len=10) "\\Blueprint": (bool) true
            }
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 8:4-8:10
          },
          Name: (string) (len=6) "$table"
        },
        description: (string) "",
        canReferenceGlobal: (bool) false,
        hasResolved: (bool) false
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 8:12-8:22
      },
      Name: (string) (len=10) "timestamps"
    },
    hasResolved: (bool) false
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 8:22-8:23
    },
    arguments: ([]phrase.AstNode) <nil>,
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 8:22-8:23
    }
  })
}
