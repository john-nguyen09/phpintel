([]analysis.Symbol) (len=3) {
  (*analysis.ClassAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=5) "\\User",
            original: (string) (len=4) "User",
            arrayLevel: (int) 0
          }
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 2:0-2:4
      },
      Name: (string) (len=4) "User"
    },
    isResolved: (bool) false
  }),
  (*analysis.ScopedMethodAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>
      },
      Scope: (*analysis.ClassAccess)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) (len=1) {
              (analysis.TypeString) {
                fqn: (string) (len=5) "\\User",
                original: (string) (len=4) "User",
                arrayLevel: (int) 0
              }
            }
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 2:0-2:4
          },
          Name: (string) (len=4) "User"
        },
        isResolved: (bool) false
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 2:6-2:12
      },
      Name: (string) (len=6) "create"
    },
    hasResolved: (bool) false
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 2:12-8:2
    },
    children: ([]analysis.Symbol) (len=2) {
      (*analysis.FunctionCall)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) <nil>
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 7:18-7:24
          },
          Name: (string) (len=6) "bcrypt"
        },
        hasResolved: (bool) false
      }),
      (*analysis.ArgumentList)({
        location: (protocol.Location) {
          URI: (string) (len=5) "test1",
          Range: (protocol.Range) 7:24-7:53
        },
        children: ([]analysis.Symbol) <nil>,
        arguments: ([]phrase.AstNode) (len=1) {
          (*lexer.Token)(StringLiteral 164 27 ModeScripting)
        },
        argumentRanges: ([]protocol.Range) <nil>,
        ranges: ([]protocol.Range) (len=1) {
          (protocol.Range) 7:24-7:53
        }
      })
    },
    arguments: ([]phrase.AstNode) (len=1) {
      (*phrase.Phrase)({
        Type: (phrase.PhraseType) ArrayCreationExpression,
        Children: ([]phrase.AstNode) (len=5) {
          (*lexer.Token)(OpenBracket 20 1 ModeScripting),
          (*lexer.Token)(Whitespace 21 5 ModeScripting),
          (*phrase.Phrase)({
            Type: (phrase.PhraseType) ArrayInitialiserList,
            Children: ([]phrase.AstNode) (len=14) {
              (*phrase.Phrase)({
                Type: (phrase.PhraseType) ArrayElement,
                Children: ([]phrase.AstNode) (len=5) {
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ArrayKey,
                    Children: ([]phrase.AstNode) (len=1) {
                      (*lexer.Token)(StringLiteral 26 11 ModeScripting)
                    }
                  }),
                  (*lexer.Token)(Whitespace 37 1 ModeScripting),
                  (*lexer.Token)(FatArrow 38 2 ModeScripting),
                  (*lexer.Token)(Whitespace 40 1 ModeScripting),
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ArrayValue,
                    Children: ([]phrase.AstNode) (len=1) {
                      (*lexer.Token)(StringLiteral 41 7 ModeScripting)
                    }
                  })
                }
              }),
              (*lexer.Token)(Comma 48 1 ModeScripting),
              (*lexer.Token)(Whitespace 49 5 ModeScripting),
              (*phrase.Phrase)({
                Type: (phrase.PhraseType) ArrayElement,
                Children: ([]phrase.AstNode) (len=5) {
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ArrayKey,
                    Children: ([]phrase.AstNode) (len=1) {
                      (*lexer.Token)(StringLiteral 54 10 ModeScripting)
                    }
                  }),
                  (*lexer.Token)(Whitespace 64 1 ModeScripting),
                  (*lexer.Token)(FatArrow 65 2 ModeScripting),
                  (*lexer.Token)(Whitespace 67 1 ModeScripting),
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ArrayValue,
                    Children: ([]phrase.AstNode) (len=1) {
                      (*lexer.Token)(StringLiteral 68 6 ModeScripting)
                    }
                  })
                }
              }),
              (*lexer.Token)(Comma 74 1 ModeScripting),
              (*lexer.Token)(Whitespace 75 5 ModeScripting),
              (*phrase.Phrase)({
                Type: (phrase.PhraseType) ArrayElement,
                Children: ([]phrase.AstNode) (len=5) {
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ArrayKey,
                    Children: ([]phrase.AstNode) (len=1) {
                      (*lexer.Token)(StringLiteral 80 7 ModeScripting)
                    }
                  }),
                  (*lexer.Token)(Whitespace 87 1 ModeScripting),
                  (*lexer.Token)(FatArrow 88 2 ModeScripting),
                  (*lexer.Token)(Whitespace 90 1 ModeScripting),
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ArrayValue,
                    Children: ([]phrase.AstNode) (len=1) {
                      (*lexer.Token)(StringLiteral 91 19 ModeScripting)
                    }
                  })
                }
              }),
              (*lexer.Token)(Comma 110 1 ModeScripting),
              (*lexer.Token)(Whitespace 111 5 ModeScripting),
              (*phrase.Phrase)({
                Type: (phrase.PhraseType) ArrayElement,
                Children: ([]phrase.AstNode) (len=5) {
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ArrayKey,
                    Children: ([]phrase.AstNode) (len=1) {
                      (*lexer.Token)(StringLiteral 116 10 ModeScripting)
                    }
                  }),
                  (*lexer.Token)(Whitespace 126 1 ModeScripting),
                  (*lexer.Token)(FatArrow 127 2 ModeScripting),
                  (*lexer.Token)(Whitespace 129 1 ModeScripting),
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ArrayValue,
                    Children: ([]phrase.AstNode) (len=1) {
                      (*lexer.Token)(StringLiteral 130 7 ModeScripting)
                    }
                  })
                }
              }),
              (*lexer.Token)(Comma 137 1 ModeScripting),
              (*lexer.Token)(Whitespace 138 5 ModeScripting),
              (*phrase.Phrase)({
                Type: (phrase.PhraseType) ArrayElement,
                Children: ([]phrase.AstNode) (len=5) {
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ArrayKey,
                    Children: ([]phrase.AstNode) (len=1) {
                      (*lexer.Token)(StringLiteral 143 10 ModeScripting)
                    }
                  }),
                  (*lexer.Token)(Whitespace 153 1 ModeScripting),
                  (*lexer.Token)(FatArrow 154 2 ModeScripting),
                  (*lexer.Token)(Whitespace 156 1 ModeScripting),
                  (*phrase.Phrase)({
                    Type: (phrase.PhraseType) ArrayValue,
                    Children: ([]phrase.AstNode) (len=1) {
                      (*phrase.Phrase)({
                        Type: (phrase.PhraseType) FunctionCallExpression,
                        Children: ([]phrase.AstNode) (len=2) {
                          (*phrase.Phrase)({
                            Type: (phrase.PhraseType) QualifiedName,
                            Children: ([]phrase.AstNode) (len=1) {
                              (*phrase.Phrase)({
                                Type: (phrase.PhraseType) NamespaceName,
                                Children: ([]phrase.AstNode) (len=1) {
                                  (*lexer.Token)(Name 157 6 ModeScripting)
                                }
                              })
                            }
                          }),
                          (*phrase.Phrase)({
                            Type: (phrase.PhraseType) ArgumentExpressionList,
                            Children: ([]phrase.AstNode) (len=3) {
                              (*lexer.Token)(OpenParenthesis 163 1 ModeScripting),
                              (*lexer.Token)(StringLiteral 164 27 ModeScripting),
                              (*lexer.Token)(CloseParenthesis 191 1 ModeScripting)
                            }
                          })
                        }
                      })
                    }
                  })
                }
              }),
              (*lexer.Token)(Comma 192 1 ModeScripting)
            }
          }),
          (*lexer.Token)(Whitespace 193 1 ModeScripting),
          (*lexer.Token)(CloseBracket 194 1 ModeScripting)
        }
      })
    },
    argumentRanges: ([]protocol.Range) (len=1) {
      (protocol.Range) 2:13-8:1
    },
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 2:12-8:2
    }
  })
}
