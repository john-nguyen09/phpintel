([]analysis.Symbol) (len=30) {
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.ClassTypeDesignator)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) (len=1) {
              (analysis.TypeString) {
                fqn: (string) (len=11) "\\TestClass1",
                original: (string) (len=10) "TestClass1"
              }
            },
            uniqueFQNs: (map[string]bool) (len=1) {
              (string) (len=11) "\\TestClass1": (bool) true
            }
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 2:12-2:22
          },
          Name: (string) (len=10) "TestClass1"
        }
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 2:0-2:5
      },
      Name: (string) (len=5) "$var1"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.ClassTypeDesignator)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=11) "\\TestClass1",
            original: (string) (len=10) "TestClass1"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=11) "\\TestClass1": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 2:12-2:22
      },
      Name: (string) (len=10) "TestClass1"
    }
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 2:22-2:23
    },
    arguments: ([]phrase.AstNode) <nil>,
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 2:22-2:23
    }
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=11) "\\TestClass1",
            original: (string) (len=10) "TestClass1"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=11) "\\TestClass1": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 2:0-2:5
      },
      Name: (string) (len=5) "$var1"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.ClassTypeDesignator)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=11) "\\TestClass1",
            original: (string) (len=10) "TestClass1"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=11) "\\TestClass1": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 2:12-2:22
      },
      Name: (string) (len=10) "TestClass1"
    }
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 2:22-2:23
    },
    arguments: ([]phrase.AstNode) <nil>,
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 2:22-2:23
    }
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.FunctionCall)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) <nil>,
            uniqueFQNs: (map[string]bool) <nil>
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 3:8-3:20
          },
          Name: (string) (len=12) "testFunction"
        },
        hasResolved: (bool) false
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 3:0-3:5
      },
      Name: (string) (len=5) "$var2"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.FunctionCall)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 3:8-3:20
      },
      Name: (string) (len=12) "testFunction"
    },
    hasResolved: (bool) false
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 3:20-3:21
    },
    arguments: ([]phrase.AstNode) <nil>,
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 3:20-3:21
    }
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 3:0-3:5
      },
      Name: (string) (len=5) "$var2"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.FunctionCall)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 3:8-3:20
      },
      Name: (string) (len=12) "testFunction"
    },
    hasResolved: (bool) false
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 3:20-3:21
    },
    arguments: ([]phrase.AstNode) <nil>,
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 3:20-3:21
    }
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.Variable)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) (len=1) {
              (analysis.TypeString) {
                fqn: (string) (len=11) "\\TestClass1",
                original: (string) (len=10) "TestClass1"
              }
            },
            uniqueFQNs: (map[string]bool) (len=1) {
              (string) (len=11) "\\TestClass1": (bool) true
            }
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 4:8-4:13
          },
          Name: (string) (len=5) "$var1"
        },
        description: (string) "",
        canReferenceGlobal: (bool) true,
        hasResolved: (bool) false
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 4:0-4:5
      },
      Name: (string) (len=5) "$var3"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=11) "\\TestClass1",
            original: (string) (len=10) "TestClass1"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=11) "\\TestClass1": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 4:8-4:13
      },
      Name: (string) (len=5) "$var1"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=11) "\\TestClass1",
            original: (string) (len=10) "TestClass1"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=11) "\\TestClass1": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 4:0-4:5
      },
      Name: (string) (len=5) "$var3"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=11) "\\TestClass1",
            original: (string) (len=10) "TestClass1"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=11) "\\TestClass1": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 4:8-4:13
      },
      Name: (string) (len=5) "$var1"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.ScopedMethodAccess)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) <nil>,
            uniqueFQNs: (map[string]bool) <nil>
          },
          Scope: (*analysis.ClassAccess)({
            Expression: (analysis.Expression) {
              Type: (analysis.TypeComposite) {
                typeStrings: ([]analysis.TypeString) (len=1) {
                  (analysis.TypeString) {
                    fqn: (string) (len=11) "\\TestClass1",
                    original: (string) (len=10) "TestClass1"
                  }
                },
                uniqueFQNs: (map[string]bool) (len=1) {
                  (string) (len=11) "\\TestClass1": (bool) true
                }
              },
              Scope: (analysis.HasTypes) <nil>,
              Location: (protocol.Location) {
                URI: (string) (len=5) "test1",
                Range: (protocol.Range) 5:8-5:18
              },
              Name: (string) (len=10) "TestClass1"
            }
          }),
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 5:20-5:27
          },
          Name: (string) (len=7) "method1"
        }
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 5:0-5:5
      },
      Name: (string) (len=5) "$var4"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.ClassAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=11) "\\TestClass1",
            original: (string) (len=10) "TestClass1"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=11) "\\TestClass1": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 5:8-5:18
      },
      Name: (string) (len=10) "TestClass1"
    }
  }),
  (*analysis.ScopedMethodAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.ClassAccess)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) (len=1) {
              (analysis.TypeString) {
                fqn: (string) (len=11) "\\TestClass1",
                original: (string) (len=10) "TestClass1"
              }
            },
            uniqueFQNs: (map[string]bool) (len=1) {
              (string) (len=11) "\\TestClass1": (bool) true
            }
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 5:8-5:18
          },
          Name: (string) (len=10) "TestClass1"
        }
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 5:20-5:27
      },
      Name: (string) (len=7) "method1"
    }
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 5:27-5:28
    },
    arguments: ([]phrase.AstNode) <nil>,
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 5:27-5:28
    }
  }),
  (*analysis.Variable)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 5:0-5:5
      },
      Name: (string) (len=5) "$var4"
    },
    description: (string) "",
    canReferenceGlobal: (bool) true,
    hasResolved: (bool) false
  }),
  (*analysis.ClassAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=11) "\\TestClass1",
            original: (string) (len=10) "TestClass1"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=11) "\\TestClass1": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 5:8-5:18
      },
      Name: (string) (len=10) "TestClass1"
    }
  }),
  (*analysis.ScopedMethodAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.ClassAccess)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) (len=1) {
              (analysis.TypeString) {
                fqn: (string) (len=11) "\\TestClass1",
                original: (string) (len=10) "TestClass1"
              }
            },
            uniqueFQNs: (map[string]bool) (len=1) {
              (string) (len=11) "\\TestClass1": (bool) true
            }
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 5:8-5:18
          },
          Name: (string) (len=10) "TestClass1"
        }
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 5:20-5:27
      },
      Name: (string) (len=7) "method1"
    }
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 5:27-5:28
    },
    arguments: ([]phrase.AstNode) <nil>,
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 5:27-5:28
    }
  }),
  (*analysis.ClassAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=16) "\\TestMethodClass",
            original: (string) (len=15) "TestMethodClass"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=16) "\\TestMethodClass": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 6:0-6:15
      },
      Name: (string) (len=15) "TestMethodClass"
    }
  }),
  (*analysis.ScopedMethodAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.ClassAccess)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) (len=1) {
              (analysis.TypeString) {
                fqn: (string) (len=16) "\\TestMethodClass",
                original: (string) (len=15) "TestMethodClass"
              }
            },
            uniqueFQNs: (map[string]bool) (len=1) {
              (string) (len=16) "\\TestMethodClass": (bool) true
            }
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 6:0-6:15
          },
          Name: (string) (len=15) "TestMethodClass"
        }
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 6:17-6:28
      },
      Name: (string) (len=11) "testMethod6"
    }
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 6:28-6:29
    },
    arguments: ([]phrase.AstNode) <nil>,
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 6:28-6:29
    }
  }),
  (*analysis.ClassAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) (len=1) {
          (analysis.TypeString) {
            fqn: (string) (len=16) "\\TestMethodClass",
            original: (string) (len=15) "TestMethodClass"
          }
        },
        uniqueFQNs: (map[string]bool) (len=1) {
          (string) (len=16) "\\TestMethodClass": (bool) true
        }
      },
      Scope: (analysis.HasTypes) <nil>,
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 7:0-7:15
      },
      Name: (string) (len=15) "TestMethodClass"
    }
  }),
  (*analysis.ScopedMethodAccess)({
    Expression: (analysis.Expression) {
      Type: (analysis.TypeComposite) {
        typeStrings: ([]analysis.TypeString) <nil>,
        uniqueFQNs: (map[string]bool) <nil>
      },
      Scope: (*analysis.ClassAccess)({
        Expression: (analysis.Expression) {
          Type: (analysis.TypeComposite) {
            typeStrings: ([]analysis.TypeString) (len=1) {
              (analysis.TypeString) {
                fqn: (string) (len=16) "\\TestMethodClass",
                original: (string) (len=15) "TestMethodClass"
              }
            },
            uniqueFQNs: (map[string]bool) (len=1) {
              (string) (len=16) "\\TestMethodClass": (bool) true
            }
          },
          Scope: (analysis.HasTypes) <nil>,
          Location: (protocol.Location) {
            URI: (string) (len=5) "test1",
            Range: (protocol.Range) 7:0-7:15
          },
          Name: (string) (len=15) "TestMethodClass"
        }
      }),
      Location: (protocol.Location) {
        URI: (string) (len=5) "test1",
        Range: (protocol.Range) 7:17-7:28
      },
      Name: (string) (len=11) "testMethod3"
    }
  }),
  (*analysis.ArgumentList)({
    location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 7:28-7:29
    },
    arguments: ([]phrase.AstNode) <nil>,
    ranges: ([]protocol.Range) (len=1) {
      (protocol.Range) 7:28-7:29
    }
  })
}
