(*testing.T)({
  common: (testing.common) {
    mu: (sync.RWMutex) {
      w: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      writerSem: (uint32) 0,
      readerSem: (uint32) 0,
      readerCount: (int32) 0,
      readerWait: (int32) 0
    },
    output: ([]uint8) <nil>,
    w: (testing.indenter) {
      c: (*testing.common)(<already shown>)
    },
    ran: (bool) false,
    failed: (bool) false,
    skipped: (bool) false,
    done: (bool) false,
    helpers: (map[string]struct {}) (len=1) {
      (string) (len=42) "github.com/stretchr/testify/assert.NoError": (struct {}) {
      }
    },
    chatty: (bool) false,
    finished: (bool) false,
    hasSub: (int32) 0,
    raceErrors: (int) 0,
    runner: (string) (len=15) "testing.tRunner",
    parent: (*testing.common)({
      mu: (sync.RWMutex) {
        w: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        },
        writerSem: (uint32) 0,
        readerSem: (uint32) 0,
        readerCount: (int32) 0,
        readerWait: (int32) 0
      },
      output: ([]uint8) <nil>,
      w: (*os.File)({
        file: (*os.file)({
          pfd: (poll.FD) {
            fdmu: (poll.fdMutex) {
              state: (uint64) 0,
              rsema: (uint32) 0,
              wsema: (uint32) 0
            },
            Sysfd: (syscall.Handle) 0x2a8,
            rop: (poll.operation) {
              o: (syscall.Overlapped) {
                Internal: (uintptr) <nil>,
                InternalHigh: (uintptr) <nil>,
                Offset: (uint32) 0,
                OffsetHigh: (uint32) 0,
                HEvent: (syscall.Handle) <nil>
              },
              runtimeCtx: (uintptr) <nil>,
              mode: (int32) 114,
              errno: (int32) 0,
              qty: (uint32) 0,
              fd: (*poll.FD)(<already shown>),
              errc: (chan error) <nil>,
              buf: (syscall.WSABuf) {
                Len: (uint32) 0,
                Buf: (*uint8)(<nil>)
              },
              msg: (windows.WSAMsg) {
                Name: (*syscall.RawSockaddrAny)(<nil>),
                Namelen: (int32) 0,
                Buffers: (*syscall.WSABuf)(<nil>),
                BufferCount: (uint32) 0,
                Control: (syscall.WSABuf) {
                  Len: (uint32) 0,
                  Buf: (*uint8)(<nil>)
                },
                Flags: (uint32) 0
              },
              sa: (syscall.Sockaddr) <nil>,
              rsa: (*syscall.RawSockaddrAny)(<nil>),
              rsan: (int32) 0,
              handle: (syscall.Handle) <nil>,
              flags: (uint32) 0,
              bufs: ([]syscall.WSABuf) <nil>
            },
            wop: (poll.operation) {
              o: (syscall.Overlapped) {
                Internal: (uintptr) <nil>,
                InternalHigh: (uintptr) <nil>,
                Offset: (uint32) 0,
                OffsetHigh: (uint32) 0,
                HEvent: (syscall.Handle) <nil>
              },
              runtimeCtx: (uintptr) <nil>,
              mode: (int32) 119,
              errno: (int32) 0,
              qty: (uint32) 0,
              fd: (*poll.FD)(<already shown>),
              errc: (chan error) <nil>,
              buf: (syscall.WSABuf) {
                Len: (uint32) 0,
                Buf: (*uint8)(<nil>)
              },
              msg: (windows.WSAMsg) {
                Name: (*syscall.RawSockaddrAny)(<nil>),
                Namelen: (int32) 0,
                Buffers: (*syscall.WSABuf)(<nil>),
                BufferCount: (uint32) 0,
                Control: (syscall.WSABuf) {
                  Len: (uint32) 0,
                  Buf: (*uint8)(<nil>)
                },
                Flags: (uint32) 0
              },
              sa: (syscall.Sockaddr) <nil>,
              rsa: (*syscall.RawSockaddrAny)(<nil>),
              rsan: (int32) 0,
              handle: (syscall.Handle) <nil>,
              flags: (uint32) 0,
              bufs: ([]syscall.WSABuf) <nil>
            },
            pd: (poll.pollDesc) {
              runtimeCtx: (uintptr) <nil>
            },
            l: (sync.Mutex) {
              state: (int32) 0,
              sema: (uint32) 0
            },
            lastbits: ([]uint8) <nil>,
            readuint16: ([]uint16) <nil>,
            readbyte: ([]uint8) <nil>,
            readbyteOffset: (int) 0,
            csema: (uint32) 0,
            skipSyncNotif: (bool) false,
            IsStream: (bool) true,
            ZeroReadIsEOF: (bool) true,
            isFile: (bool) true,
            kind: (poll.fileKind) 1
          },
          name: (string) (len=11) "/dev/stdout",
          dirinfo: (*os.dirInfo)(<nil>),
          appendMode: (bool) false
        })
      }),
      ran: (bool) true,
      failed: (bool) true,
      skipped: (bool) false,
      done: (bool) false,
      helpers: (map[string]struct {}) <nil>,
      chatty: (bool) false,
      finished: (bool) false,
      hasSub: (int32) 1,
      raceErrors: (int) 0,
      runner: (string) (len=15) "testing.tRunner",
      parent: (*testing.common)(<nil>),
      level: (int) 0,
      creator: ([]uintptr) <nil>,
      name: (string) "",
      start: (time.Time) 2020-02-28 22:35:07.4288431 +1100 AEDT m=+0.006032401,
      duration: (time.Duration) 0s,
      barrier: (chan bool) 0xc00001c480,
      signal: (chan bool) 0xc00001c420,
      sub: ([]*testing.T) <nil>
    }),
    level: (int) 1,
    creator: ([]uintptr) (len=7) {
      (uintptr) 0x4f708f,
      (uintptr) 0x4f3290,
      (uintptr) 0x4f4bbe,
      (uintptr) 0x4f3b0d,
      (uintptr) 0x74921c,
      (uintptr) 0x4356ae,
      (uintptr) 0x461db1
    },
    name: (string) (len=22) "TestMultipleNamespaces",
    start: (time.Time) 2020-02-28 22:35:07.4698094 +1100 AEDT m=+0.046998701,
    duration: (time.Duration) 0s,
    barrier: (chan bool) 0xc0002d3500,
    signal: (chan bool) 0xc0002d3560,
    sub: ([]*testing.T) <nil>
  },
  isParallel: (bool) false,
  context: (*testing.testContext)({
    match: (*testing.matcher)({
      filter: ([]string) <nil>,
      matchFunc: (func(string, string) (bool, error)) 0x4f77e0,
      mu: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      subNames: (map[string]int64) (len=13) {
        (string) (len=29) "TestCompletionWithScope/Class": (int64) 1,
        (string) (len=34) "TestCompletionWithScope/ClassConst": (int64) 1,
        (string) (len=30) "TestCompletionWithScope/Method": (int64) 1,
        (string) (len=21) "TestNamespaceAndUse/0": (int64) 1,
        (string) (len=21) "TestNamespaceAndUse/1": (int64) 1,
        (string) (len=21) "TestNamespaceAndUse/2": (int64) 1,
        (string) (len=21) "TestNamespaceAndUse/3": (int64) 1,
        (string) (len=21) "TestNamespaceAndUse/4": (int64) 1,
        (string) (len=21) "TestNamespaceAndUse/5": (int64) 1,
        (string) (len=21) "TestNamespaceAndUse/6": (int64) 1,
        (string) (len=21) "TestNamespaceAndUse/7": (int64) 1,
        (string) (len=48) "TestNestedArgumentList/TestNestedArgumentList308": (int64) 1,
        (string) (len=48) "TestNestedArgumentList/TestNestedArgumentList345": (int64) 1
      }
    }),
    mu: (sync.Mutex) {
      state: (int32) 0,
      sema: (uint32) 0
    },
    startParallel: (chan bool) 0xc00001c3c0,
    running: (int) 1,
    numWaiting: (int) 0,
    maxParallel: (int) 8
  })
})
([]analysis.Symbol) (len=2) {
  (*analysis.Class)({
    description: (string) "",
    Location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 4:0-7:1
    },
    Modifier: (analysis.ClassModifierValue) 0,
    Name: (analysis.TypeString) {
      fqn: (string) (len=29) "\\Namespace1\\ClassInNamespace1",
      original: (string) (len=17) "ClassInNamespace1",
      arrayLevel: (int) 0
    },
    Extends: (analysis.TypeString) {
      fqn: (string) "",
      original: (string) "",
      arrayLevel: (int) 0
    },
    Interfaces: ([]analysis.TypeString) <nil>,
    Use: ([]analysis.TypeString) <nil>
  }),
  (*analysis.Class)({
    description: (string) "",
    Location: (protocol.Location) {
      URI: (string) (len=5) "test1",
      Range: (protocol.Range) 10:4-12:5
    },
    Modifier: (analysis.ClassModifierValue) 0,
    Name: (analysis.TypeString) {
      fqn: (string) (len=29) "\\Namespace2\\ClassInNamespace2",
      original: (string) (len=17) "ClassInNamespace2",
      arrayLevel: (int) 0
    },
    Extends: (analysis.TypeString) {
      fqn: (string) "",
      original: (string) "",
      arrayLevel: (int) 0
    },
    Interfaces: ([]analysis.TypeString) <nil>,
    Use: ([]analysis.TypeString) <nil>
  })
}
